@inject NavigationManager NavigationManager

@page "/carListData"

@using BlazorServerApp.Models
@using System.IO;
@using OfficeOpenXml;
@using BlazorServerApp.Pages
@using BlazorServerApp.Service
@using System.Diagnostics

<PageTitle>Car Table</PageTitle>

<h1>Cars Data</h1>
<br />

<h2>Add Car</h2>
<button class="btn btn-primary" @onclick="ShowAddForm">Add Car</button>

@if (showAddForm)
{
    <div>
        <label>Name:</label>
        <input type="text" @bind="@newCar.name" />
        @if (string.IsNullOrWhiteSpace(newCar.name))
        {
            <p class="text-danger">Please enter a name.</p>
        }

        <br />

        <label>Year:</label>
        <input type="text" @bind="@newCar.year" />
        @if (newCar.year <= 0 || string.IsNullOrWhiteSpace(newCar.year.ToString()))
        {
            <p class="text-danger">Please enter a valid year.</p>
        }

        <br />

        <label>Price:</label>
        <input type="number" @bind="@newCar.price" />
        @if (newCar.price <= 0 || string.IsNullOrWhiteSpace(newCar.price.ToString()))
        {
            <p class="text-danger">Please enter a valid price.</p>
        }

        <br />

        <label>Kilometers:</label>
        <input type="number" @bind="@newCar.km" />
        @if (newCar.km <= 0 || string.IsNullOrWhiteSpace(newCar.km.ToString()))
        {
            <p class="text-danger">Please enter a valid number of kilometers.</p>
        }
        <br />

        <button class="btn btn-success" @onclick="AddCar" disabled="@(!IsCarValid())">Add</button>
        <button class="btn btn-danger" @onclick="CancelAdd">Cancel</button>
    </div>
}



<br />
<br />

<div style="margin-top: 10px; margin-bottom: 10px;">

    <label>Year From:</label>
    <input type="number" @bind="@yearFrom" />
    <br />

    <label>Year To:</label>
    <input type="number" @bind="@yearTo" />
    <br /><br />

    <button class="btn btn-primary" @onclick="FilterCarsByYear">Apply Filter</button>
    <button class="btn btn-secondary" @onclick="ResetFilter">Reset Filter</button>
</div>


<p><i>If the car has passed over <b>200,000 km</b>, it's not recommended to buy it if you are planning long distance trips.</i></p>


<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>
                <div style="display: flex; align-items: center;">
                    Year
                    <button class="btn btn-link" @onclick="SortByYearAscending">&#9650;</button>
                    <button class="btn btn-link" @onclick="SortByYearDescending">&#9660;</button>
                </div>
            </th>
            <th>
                <div style="display: flex; align-items: center;">
                    Price
                    <button class="btn btn-link" @onclick="SortByPriceAscending">&#9650;</button>
                    <button class="btn btn-link" @onclick="SortByPriceDescending">&#9660;</button>
                </div>
            </th>
            <th>Kilometers</th>
            <th>Management</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var car in filteredCarList)
        {
            <tr style="@(car.km > 200000 ? "color: red;" : "color: green;")">
                <td>@car.name</td>
                <td>@car.year</td>
                <td>@car.price €</td>
                <td>@car.km</td>
                <td><button class="btn btn-danger" @onclick="() => DeleteCar(car)">Delete</button></td>
            </tr>
        }
    </tbody>
</table>

<br />

<button class="btn btn-primary" @onclick="ExportToExcel">Export to Excel</button>

<br /> <br /> <br />


<h3> • Performance is based on searching by "BMW%" and returns number of rows. </h3>
<br />
<h4>Lambda Expression performance testing: </h4>
<button @onclick="IterateCarList">Iterate Car List</button>
<p>Start Time: <label>@startTimeWithLambdaExpression</label></p>
<p>End Time: <label>@endTimeWithLambdaExpression</label></p>
<p>Counter: <label>@counterWithLambdaExpression</label></p>

<br />
<br />

<h4> • Storage Procedure performance testing: </h4>
<button @onclick="IterateCarListWithStoredProcedure">Iterate Car List</button>
<p>Start Time: <label>@startTimeWithStoredProcedure</label></p>
<p>End Time: <label>@endTimeWithStoredProcedure</label></p>
<p>Counter: <label>@carCountWithStoredProcedure</label></p>

<br />
<br />

@code {

    private bool showAddForm;
    private Car newCar = new Car();
    private List<Car> carList;


    private int counterWithLambdaExpression;
    private string startTimeWithLambdaExpression;
    private string endTimeWithLambdaExpression;

    private int carCountWithStoredProcedure;
    private string startTimeWithStoredProcedure;
    private string endTimeWithStoredProcedure;


    private int yearFrom;
    private int yearTo;
    private List<Car> filteredCarList;

    [Inject]
    public ICarService CarService { get; set; }

    protected override void OnInitialized()
    {
        carList = CarService.getCars();

        filteredCarList = carList;
        base.OnInitialized();
        Car car;
        for (var i = 1; i < 500; i++)
        {
            car = new Car();

            if (i > 250 && i < 350)
            {
                car.name = "HEY - " + i.ToString();
            }
            else
            {
                car.name = "Test - " + i.ToString();
            }
            car.price = 4000;
            car.year = 2009;
            car.km = 100000;


            //   CarService.AddCar(car);
        }
    }

    /// <summary>
    /// Lambda expression performance testing - time
    /// </summary>
    private void IterateCarList()
    {
        // Start timer
        var stopwatch = Stopwatch.StartNew();
        startTimeWithLambdaExpression = DateTime.Now.ToString();

        counterWithLambdaExpression = carList.Count(car => car.name.StartsWith("BMW"));

        // Stop timer
        stopwatch.Stop();
        endTimeWithLambdaExpression = DateTime.Now.ToString();
    }

    /// <summary>
    /// Stored Procedure performance testing - time
    /// </summary>
    private async Task IterateCarListWithStoredProcedure()
    {
        // Start timer
        var stopwatch = Stopwatch.StartNew();
        startTimeWithStoredProcedure = DateTime.Now.ToString();

        carCountWithStoredProcedure = await CarService.GetCarCountWithNameStartingWithAsync("BMW");

        // Stop timer
        stopwatch.Stop();
        endTimeWithStoredProcedure = DateTime.Now.ToString();
    }

    /// <summary>
    /// Sort the values by Year ascending
    /// </summary>
    private void SortByYearAscending()
    {
        filteredCarList = filteredCarList.OrderBy(c => c.year).ToList();
    }

    /// <summary>
    /// Sort the values by Year descending
    /// </summary>
    private void SortByYearDescending()
    {
        filteredCarList = filteredCarList.OrderByDescending(c => c.year).ToList();
    }

    /// <summary>
    /// Sort the values by Price ascending
    /// </summary>
    private void SortByPriceAscending()
    {
        filteredCarList = filteredCarList.OrderBy(c => c.price).ToList();
    }

    /// <summary>
    /// Sort the values by Price descending
    /// </summary>
    private void SortByPriceDescending()
    {
        filteredCarList = filteredCarList.OrderByDescending(c => c.price).ToList();
    }


    /// <summary>
    /// Form check if the entered values from the form are acceptable for the car
    /// </summary>
    private bool IsCarValid()
    {
        if (string.IsNullOrWhiteSpace(newCar.name) || newCar.year <= 0 || newCar.price <= 0 || newCar.km <= 0
        || string.IsNullOrWhiteSpace(newCar.year.ToString()) || string.IsNullOrWhiteSpace(newCar.price.ToString()) ||
        string.IsNullOrWhiteSpace(newCar.km.ToString()))
        {
            return false;
        }
        return true;
    }


    /// <summary>
    /// Flag, whether to show to form for Adding a new car or not.
    /// </summary>
    private void ShowAddForm()
    {
        showAddForm = true;
    }

    /// <summary>
    /// Add a new car.
    /// </summary>
    private void AddCar()
    {

        carList.Add(newCar);
        CarService.AddCar(newCar);

        showAddForm = false;
        newCar = new Car();

    }

    /// <summary>
    /// Hide the Add form and don't add a new Car to the available car list.
    /// </summary>
    private void CancelAdd()
    {
        showAddForm = false;
        newCar = new Car();
    }


    /// <summary>
    /// Exports data to an Excel file.
    /// </summary>
    /// <remarks>
    /// This method uses the EPPlus library to generate an Excel file from car data.
    /// </remarks>
    /// <exception cref="LicenseException">Thrown if the license for EPPlus is not valid.</exception>
    private void ExportToExcel()
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Car Data");

            // headers
            worksheet.Cells[1, 1].Value = "Name";
            worksheet.Cells[1, 2].Value = "Year";
            worksheet.Cells[1, 3].Value = "Price";
            worksheet.Cells[1, 4].Value = "Kilometers";

            int row = 2;
            foreach (var car in filteredCarList)
            {
                worksheet.Cells[row, 1].Value = car.name;
                worksheet.Cells[row, 2].Value = car.year;
                worksheet.Cells[row, 3].Value = car.price;
                worksheet.Cells[row, 4].Value = car.km;

                // Check the value of "km" and apply text color
                if (car.km > 200000)
                {
                    worksheet.Cells[row, 1, row, 4].Style.Font.Color.SetColor(System.Drawing.Color.Red);
                }
                else
                {
                    worksheet.Cells[row, 1, row, 4].Style.Font.Color.SetColor(System.Drawing.Color.Green);
                }

                row++;
            }

            worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

            // Add borders to all cells
            var border = worksheet.Cells[1, 1, worksheet.Dimension.End.Row, worksheet.Dimension.End.Column].Style.Border;
            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = OfficeOpenXml.Style.ExcelBorderStyle.Thin;

            using (var stream = new MemoryStream())
            {
                package.SaveAs(stream);

                var buffer = stream.ToArray();
                var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                NavigationManager.NavigateTo($"data:{mimeType};base64,{Convert.ToBase64String(buffer)}", true);
            }
        }
    }

    /// <summary>
    /// Delete a car from the List of available cars.
    /// </summary>
    private void DeleteCar(Car car)
    {
        filteredCarList.Remove(car);
        carList.Remove(car);
        CarService.DeleteCar(car);
    }

    /// <summary>
    /// Filter the cars based on the selected year range.
    /// </summary>
    private void FilterCarsByYear()
    {
        filteredCarList = carList
            .Where(car => car.year >= yearFrom && car.year <= yearTo)
            .ToList();
    }

    /// <summary>
    /// Reset the year filter and show all cars.
    /// </summary>
    private void ResetFilter()
    {
        yearFrom = 0;
        yearTo = 0;
        filteredCarList = carList;
    }

}