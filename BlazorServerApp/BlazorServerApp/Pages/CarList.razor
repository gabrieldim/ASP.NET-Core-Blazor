@inject NavigationManager NavigationManager

@page "/carListData"

@using BlazorServerApp.Models
@using System.IO;
@using OfficeOpenXml;
@using BlazorServerApp.Pages
@using BlazorServerApp.Service

<PageTitle>Car Table</PageTitle>

<h1>Cars Data</h1>
<br />
<p><i>If the car has passed over <b>200,000 km</b>, it's not recommended to buy it if you are planning long distance trips.</i></p>


<button class="btn btn-primary" @onclick="ShowAddForm">Add Car</button>

@if (showAddForm)
{
    <h2>Add Car</h2>
    <div>
        <label>Name:</label>
        <input type="text" @bind="@newCar.name" />

        <label>Year:</label>
        <input type="number" @bind="@newCar.year" />

        <label>Price:</label>
        <input type="number" @bind="@newCar.price" />

        <label>Kilometers:</label>
        <input type="number" @bind="@newCar.km" />

        <div>
            @if (string.IsNullOrWhiteSpace(newCar.name))
            {
                <p class="text-danger">Please enter a name.</p>
            }

            @if (newCar.year <= 0)
            {
                <p class="text-danger">Please enter a valid year. (above 1980 only)</p>
            }

            @if (newCar.price <= 0)
            {
                <p class="text-danger">Please enter a valid price.</p>
            }

            @if (newCar.km <= 0)
            {
                <p class="text-danger">Please enter a valid number of kilometers.</p>
            }
        </div>

        <button class="btn btn-success" @onclick="AddCar" disabled="@(!IsCarValid())">Add</button>
        <button class="btn btn-danger" @onclick="CancelAdd">Cancel</button>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>
                <div style="display: flex; align-items: center;">
                    Year
                    <button class="btn btn-link" @onclick="SortByYearAscending">&#9650;</button>
                    <button class="btn btn-link" @onclick="SortByYearDescending">&#9660;</button>
                </div>
            </th>
            <th>
                <div style="display: flex; align-items: center;">
                    Price
                    <button class="btn btn-link" @onclick="SortByPriceAscending">&#9650;</button>
                    <button class="btn btn-link" @onclick="SortByPriceDescending">&#9660;</button>
                </div>
            </th>
            <th>Kilometers</th>
            <th>Management</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var car in carList)
        {
            <tr style="@(car.km > 200000 ? "color: red;" : "color: green;")">
                <td>@car.name</td>
                <td>@car.year</td>
                <td>@car.price €</td>
                <td>@car.km</td>
                <td><button class="btn btn-danger" @onclick="() => DeleteCar(car)">Delete</button></td>
            </tr>
        }
    </tbody>
</table>

<br />

<button class="btn btn-primary" @onclick="ExportToExcel">Export to Excel</button>



@code {

    private bool showAddForm;
    private Car newCar = new Car();
    private List<Car> carList;

    [Inject]
    public ICarService CarService { get; set; }

    protected override void OnInitialized()
    {
        carList = CarService.getCars();
        base.OnInitialized();
    }

    /// <summary>
    /// Sort the values by Year ascending
    /// </summary>
    private void SortByYearAscending()
    {
        carList = carList.OrderBy(c => c.year).ToList();
    }

    /// <summary>
    /// Sort the values by Year descending
    /// </summary>
    private void SortByYearDescending()
    {
        carList = carList.OrderByDescending(c => c.year).ToList();
    }

    /// <summary>
    /// Sort the values by Price ascending
    /// </summary>
    private void SortByPriceAscending()
    {
        carList = carList.OrderBy(c => c.price).ToList();
    }

    /// <summary>
    /// Sort the values by Price descending
    /// </summary>
    private void SortByPriceDescending()
    {
        carList = carList.OrderByDescending(c => c.price).ToList();
    }


    /// <summary>
    /// Form check if the entered values from the form are acceptable for the car
    /// </summary>
    private bool IsCarValid()
    {
        if(string.IsNullOrWhiteSpace(newCar.name) || newCar.year <= 1980 || newCar.price <= 0 || newCar.km <= 0)
        {
            return false;
        }
        return true;
    }

    /// <summary>
    /// Flag, whether to show to form for Adding a new car or not.
    /// </summary>
    private void ShowAddForm()
    {
        showAddForm = true;
    }

    /// <summary>
    /// Add a new car.
    /// </summary>
    private void AddCar()
    {

       carList.Add(newCar);
       CarService.AddCar(newCar);

       showAddForm = false;
       newCar = new Car();
        
    }

    /// <summary>
    /// Hide the Add form and don't add a new Car to the available car list.
    /// </summary>
    private void CancelAdd()
    {
        showAddForm = false;
        newCar = new Car();
    }


    /// <summary>
    /// Exports data to an Excel file.
    /// </summary>
    /// <remarks>
    /// This method uses the EPPlus library to generate an Excel file from car data.
    /// </remarks>
    /// <exception cref="LicenseException">Thrown if the license for EPPlus is not valid.</exception>
    private void ExportToExcel()
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Car Data");

            // headers
            worksheet.Cells[1, 1].Value = "Name";
            worksheet.Cells[1, 2].Value = "Year";
            worksheet.Cells[1, 3].Value = "Price";
            worksheet.Cells[1, 4].Value = "Kilometers";

            int row = 2;
            foreach (var car in carList)
            {
                worksheet.Cells[row, 1].Value = car.name;
                worksheet.Cells[row, 2].Value = car.year;
                worksheet.Cells[row, 3].Value = car.price;
                worksheet.Cells[row, 4].Value = car.km;

                row++;
            }

            worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();


            using (var stream = new MemoryStream())
            {
                package.SaveAs(stream);

                var buffer = stream.ToArray();
                var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                NavigationManager.NavigateTo($"data:{mimeType};base64,{Convert.ToBase64String(buffer)}", true);
            }
        }
    }

    /// <summary>
    /// Delete a car from the List of available cars.
    /// </summary>
    private void DeleteCar(Car car)
    {
        carList.Remove(car);
        CarService.DeleteCar(car);
    }

}